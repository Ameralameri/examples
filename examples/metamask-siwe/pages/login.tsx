import Head from 'next/head'
import styles from '@/styles/Home.module.css'
import { GetServerSideProps, InferGetServerSidePropsType } from 'next'
import { generateNonce, SiweMessage } from 'siwe'

type Props = InferGetServerSidePropsType<typeof getServerSideProps>

export default function Login({ nonce }: Props) {
  // this will take care of fetching all the information we need to create a message and sign it
  const handleLogin = async () => {
    // check that MetaMask is installed
    if (typeof window.ethereum === 'undefined') {
      alert('Please install MetaMask at https://metamask.io/download/')
      return
    }

    // request the user's account address
    const accounts = await window.ethereum.request({
      method: 'eth_requestAccounts',
    })

    // narrow the type of accounts to an array of strings since we receive Maybe<unknown>
    const isAccountsReceived =
      Array.isArray(accounts) && typeof accounts[0] === 'string'

    // if the accounts are received, we extract the first account
    const address = isAccountsReceived ? accounts[0] : ''

    if (!isAccountsReceived) {
      alert('Please connect to MetaMask')
      return
    }

    // request the user's chainId
    const chainId = await window.ethereum.request({ method: 'eth_chainId' })

    // narrow the type of chainId to a string
    const isChainIdReceived = typeof chainId === 'string'

    // if chainId is not received, we can't proceed
    if (!isChainIdReceived) {
      alert('Please connect to the correct network')
      return
    }

    // create a new instance of the SiweMessage class
    const siweInstance = new SiweMessage({
      // this will let the user validate the domain they are logging in to
      domain: window.location.host,
      // this will let the user validate the origin they are logging in to
      uri: window.location.origin,
      address: address,
      statement: 'I am logging in to the SIWE demo',
      version: '1',
      chainId: Number(chainId),
      nonce,
    })

    // parse the message to a JSON string
    const message = siweInstance.prepareMessage()

    // submit the message to the user to sign
    const signature = await window.ethereum.request({
      method: 'personal_sign',
      params: [message, address],
    })

    const res = await fetch('/api/login', {
      method: 'POST',
      body: JSON.stringify({ message, signature, address }),
    })
    const data = await res.json()
    console.log(data)
  }

  return (
    <>
      <Head>
        <title>MetaMask + SIWE</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <button onClick={handleLogin}>Login</button>
      </main>
    </>
  )
}

// Passing the nonce server side will reduce the amount of calls for authentication.
export const getServerSideProps: GetServerSideProps<{
  nonce: string
}> = async () => {
  const nonce = generateNonce()

  return {
    props: {
      nonce,
    },
  }
}
